<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yoop.Wu</title>
  
  <subtitle>人生没有四季，努力就是旺季，不努力就是淡季!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoopwu.github.io/"/>
  <updated>2018-03-07T12:59:36.182Z</updated>
  <id>http://yoopwu.github.io/</id>
  
  <author>
    <name>Yoop.Wu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java经典算法之——斐波拉西算法</title>
    <link href="http://yoopwu.github.io/2018/03/07/%E6%96%90%E6%B3%A2%E6%8B%89%E8%A5%BF%E7%AE%97%E6%B3%95/"/>
    <id>http://yoopwu.github.io/2018/03/07/斐波拉西算法/</id>
    <published>2018-03-07T12:16:33.000Z</published>
    <updated>2018-03-07T12:59:36.182Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于斐波拉西数列"><a href="#关于斐波拉西数列" class="headerlink" title="关于斐波拉西数列"></a>关于斐波拉西数列</h3><p>斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……</p><p>在数学上，斐波纳契数列以如下被以递归的方法定义：F(0)=0，F(1)=1, F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用</p><h3 id="斐波拉西算法的实现"><a href="#斐波拉西算法的实现" class="headerlink" title="斐波拉西算法的实现"></a>斐波拉西算法的实现</h3><h4 id="第一种实现方式"><a href="#第一种实现方式" class="headerlink" title="第一种实现方式"></a>第一种实现方式</h4><p>一般来讲，斐波拉西算法的实现都是按照上面的公式<code>F(n)=F(n-1)+F(n-2)（n&gt;=2，n∈N*）</code>来实现的，因此具体点的算法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 利用递归思想实现</span><br><span class="line">public static long fibonaci(int position) &#123;</span><br><span class="line">if (position == 0 || position == 1) &#123;</span><br><span class="line">return position;</span><br><span class="line">&#125;</span><br><span class="line">return fibonaci(position - 1) + fibonaci(position - 2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>利用递归思想实现斐波拉西算法是可以的，结果也不会有错，但是这个方法存在一个弊端：当需要计算的量很大的时候，会大量占用系统资源，会出现较为严重的内存抖动问题，而且耗时很长，往往越到后面，每增加一个量，计算机计算的耗时会成几何倍数增长。举个例子：若我们计算fibonaci(50)和计算fibonaci(51),结果我们得到的结果是，fibonaci(50)耗时接近58秒,fibonaci(51)耗时接近94秒，由此可见，越到后面计算了越大，耗时就会越久，那么，有没有其他的实现方式，不仅耗时短而且还不占用太多的计算机资源呢？</p><h4 id="第二种实现方式"><a href="#第二种实现方式" class="headerlink" title="第二种实现方式"></a>第二种实现方式</h4><p>如下，是一种利用缓存的方式来优化的斐波拉西算法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 利用缓存的方式来优化斐波拉西算法</span><br><span class="line"> */</span><br><span class="line">public static long computyeFibonaci(int positionInFibSequence) &#123;</span><br><span class="line">long prev = 0;</span><br><span class="line">long current = 1;</span><br><span class="line">long newValue;</span><br><span class="line">for (int i = 1; i &lt; positionInFibSequence; i++) &#123;</span><br><span class="line">newValue = current + prev;</span><br><span class="line">prev = current;</span><br><span class="line">current = newValue;</span><br><span class="line">&#125;</span><br><span class="line">return current;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>经过计算验证可得，不管传入的参数是多少，对计算机来说，基本上是立即可得结果，较之利用递归方式来实现的算法，这种方式确实是优秀了不少。不仅不会出现内存抖动的问题，而且用时非常短</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;关于斐波拉西数列&quot;&gt;&lt;a href=&quot;#关于斐波拉西数列&quot; class=&quot;headerlink&quot; title=&quot;关于斐波拉西数列&quot;&gt;&lt;/a&gt;关于斐波拉西数列&lt;/h3&gt;&lt;p&gt;斐波那契数列（Fibonacci sequence），又称黄金分割数列、因数学家列昂纳多·斐波那契（Leonardoda Fibonacci）以兔子繁殖为例子而引入，故又称为“兔子数列”，指的是这样一个数列：1、1、2、3、5、8、13、21、34、……&lt;/p&gt;
&lt;p&gt;在数学上，斐波纳契数列以如下被以递归的方法定义：F(0)=0，F(1)=1, F(n)=F(n-1)+F(n-2)（n&amp;gt;=2，n∈N*）在现代物理、准晶体结构、化学等领域，斐波纳契数列都有直接的应用&lt;/p&gt;
&lt;h3 id=&quot;斐波拉西算法的实现&quot;&gt;&lt;a href=&quot;#斐波拉西算法的实现&quot; class=&quot;headerlink&quot; title=&quot;斐波拉西算法的实现&quot;&gt;&lt;/a&gt;斐波拉西算法的实现&lt;/h3&gt;&lt;h4 id=&quot;第一种实现方式&quot;&gt;&lt;a href=&quot;#第一种实现方式&quot; class=&quot;headerlink&quot; title=&quot;第一种实现方式&quot;&gt;&lt;/a&gt;第一种实现方式&lt;/h4&gt;&lt;p&gt;一般来讲，斐波拉西算法的实现都是按照上面的公式&lt;code&gt;F(n)=F(n-1)+F(n-2)（n&amp;gt;=2，n∈N*）&lt;/code&gt;来实现的，因此具体点的算法如下：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 利用递归思想实现&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public static long fibonaci(int position) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	if (position == 0 || position == 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		return position;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return fibonaci(position - 1) + fibonaci(position - 2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="斐波拉西" scheme="http://yoopwu.github.io/tags/%E6%96%90%E6%B3%A2%E6%8B%89%E8%A5%BF/"/>
    
      <category term="Java算法" scheme="http://yoopwu.github.io/tags/Java%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>序言-写在前面</title>
    <link href="http://yoopwu.github.io/2018/03/06/%E5%BA%8F%E8%A8%80/"/>
    <id>http://yoopwu.github.io/2018/03/06/序言/</id>
    <published>2018-03-06T12:35:18.660Z</published>
    <updated>2018-03-08T14:43:06.718Z</updated>
    
    <content type="html"><![CDATA[<p>从事软件开发行业也差不多有三年时间了，期间主要是从事android软件开发。之前也学过JavaWeb开发，但是久了不使用，现在也基本上忘的差不多了。在工作期间，也自学过一些其他的语言，包括Python、React-Native等基础知识，但由于各种原因，没有坚持下来，现在想想确实有点可惜了，有机会一定要重新拾起来。</p><p>想想现在差不多有很长一段时间由于懒惰而没有学习、进步了，现在有一种深深的危机感和内心的愧疚。逐渐发现身边的朋友每天都在进步、同时也在不断的写个人博客，来记录自己的成长历程，而且也在向GitHub提交自己的项目，这无疑会在他们以后的面试过程中加分。而且，在之前的面试过程中，也发现了这个问题，很多的同僚都会有自己的博客，而且在GitHub上面提交过自己的项目，这让我意识到自己问题的严重性。</p><p>在成长过程中，必然的会遇到各种瓶颈，也会遇到很多的困难和问题。写博客，记录下自己遇到的问题，并记录下解决方案，这会是一个很好的方法，以后若遇到同样的问题，也可以方便自己查找到解决方案，同时也许有机会为他人提供一定的帮助，何乐而不为？</p><p>其实，很早之前就有过写博客的想法，只是一直没有落到实处，而现在也是时候开启我的博客之路了，Come on!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从事软件开发行业也差不多有三年时间了，期间主要是从事android软件开发。之前也学过JavaWeb开发，但是久了不使用，现在也基本上忘的差不多了。在工作期间，也自学过一些其他的语言，包括Python、React-Native等基础知识，但由于各种原因，没有坚持下来，现在想
      
    
    </summary>
    
    
      <category term="序言" scheme="http://yoopwu.github.io/tags/%E5%BA%8F%E8%A8%80/"/>
    
  </entry>
  
</feed>
